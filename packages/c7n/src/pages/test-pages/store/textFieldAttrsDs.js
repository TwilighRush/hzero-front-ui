// import { createOptions } from "../index";
import { DataSet } from "choerodon-ui/pro";
import { FieldType } from "choerodon-ui/pro/lib/data-set/enum";
import Icon from "choerodon-ui/lib/icon";

export const optionsFields = [
  { name: "value", type: FieldType.string },
  { name: "meaning", type: FieldType.string },
];

export const createOptions = (data) => {
  return new DataSet({
    fields: optionsFields,
    data,
  });
};

// 属性集合 data
const textFieldAttrsList = [
  {
    name: "required",
    // nickName: "required",
    type: "boolean",
    value: "",
    flag: "false",
    bindFor: ["comp", "field"],
  },
  {
    name: "multiple",
    // nickName: "multiple",
    type: "boolean",
    value: "",
    flag: "false",
    bindFor: ["field"],
  },
  // {
  //   name: "label",
  //   // nickName: "label",
  //   type: "boolean",
  //   value: "hahahahha",
  //   flag: "false",
  //   bindFor: ["comp", "field"],
  // },
  {
    name: "showValidation",
    // nickName: "showValidation",
    type: "enumerate",
    value: "tooltip",
    flag: "false",
    bindFor: ["comp"],
    options: createOptions([
      { value: "newLine", meaning: "newLine" },
      { value: "tooltip", meaning: "tootip" },
    ]),
  },
  {
    name: "help",
    // nickName: "help",
    type: "string",
    value: "help tips",
    flag: "false",
    bindFor: ["comp", "field"],
  },
  {
    name: "renderer",
    // nickName: "renderer",
    type: "callback",
    value: () => "这里是renderer内容",
    flag: "false",
    bindFor: ["comp"],
  },
  {
    name: "useColon",
    // nickName: "useColon",
    type: "boolean",
    value: "",
    flag: "false",
    bindFor: ["comp"],
  },
  {
    name: "readOnly",
    // nickName: "readOnly",
    type: "boolean",
    value: "",
    flag: "false",
    bindFor: ["comp", "field"],
  },
  {
    name: "disabled",
    // nickName: "disabled",
    type: "boolean",
    value: "",
    flag: "false",
    bindFor: ["comp", "field"],
  },
  // {
  //   name: "multiple",
  //   // nickName: "multiple",
  //   type: "boolean",
  //   value: "",
  //   flag: "false",
  //   bindFor: ["comp", "field"],
  // },
  {
    name: "highlight",
    // nickName: "highlight",
    type: "boolean",
    value: "",
    flag: "false",
    bindFor: ["comp", "field"],
  },
  {
    name: "clearButton",
    // nickName: "clearButton",
    type: "boolean",
    value: "",
    flag: "false",
    bindFor: ["comp"],
  },
  {
    name: "range",
    // nickName: "range",
    type: "boolean",
    value: "",
    flag: "false",
    bindFor: ["comp", "field"],
  },
  {
    name: "autoComplete",
    // nickName: "autoComplete",
    type: "boolean",
    value: "",
    flag: "false",
    bindFor: ["comp"],
  },
  {
    name: "showLengthInfo",
    // nickName: "showLengthInfo",
    type: "boolean",
    value: "",
    flag: "false",
    bindFor: ["comp"],
  },
  {
    name: "dropdownMatchSelectWidth",
    // nickName: "dropdownMatchSelectWidth",
    type: "boolean",
    value: "",
    flag: "false",
    bindFor: ["comp"],
  },
  {
    name: "searchable",
    // nickName: "searchable",
    type: "boolean",
    value: "",
    flag: "false",
    bindFor: ["comp"],
  },
  {
    name: "combo",
    // nickName: "combo",
    type: "boolean",
    value: "",
    flag: "false",
    bindFor: ["comp"],
  },
  {
    name: "reverse",
    // nickName: "reverse",
    type: "boolean",
    value: "",
    flag: "false",
    bindFor: ["comp"],
  },
  {
    name: "selectAllButton",
    // nickName: "selectAllButton",
    type: "boolean",
    value: "",
    flag: "false",
    bindFor: ["comp"],
  },
  {
    name: "searchFieldInPopup",
    // nickName: "searchFieldInPopup",
    type: "boolean",
    value: "",
    flag: "false",
    bindFor: ["comp"],
  },
  {
    name: "vertical",
    // nickName: "vertical",
    type: "boolean",
    value: "",
    flag: "false",
    bindFor: ["comp"],
  },
  {
    name: "treeCheckable",
    // nickName: "treeCheckable",
    type: "boolean",
    value: "",
    flag: "false",
    bindFor: ["comp"],
  },
  {
    name: "keyboard",
    // nickName: "treeCheckable",
    type: "boolean",
    value: "",
    flag: "false",
    bindFor: ["comp"],
  },
  {
    name: "placeholder",
    // nickName: "placeholder",
    type: "string",
    value: "请输入内容",
    flag: "false",
    bindFor: ["comp"],
  },
  {
    name: "prefix",
    // nickName: "prefix",
    type: "ReactNode",
    value: <Icon type="role_assignments" />,
    flag: "false",
    bindFor: ["comp"],
  },
  {
    name: "suffix",
    // nickName: "suffix",
    type: "ReactNode",
    value: <Icon type="settings_phone-o" />,
    flag: "false",
    bindFor: ["comp"],
  },
  {
    name: "addonBefore",
    // nickName: "addonBefore",
    type: "string",
    value: "电话",
    flag: "false",
    bindFor: ["comp"],
  },
  {
    name: "addonBeforeStyle",
    // nickName: "addonBeforeStyle",
    type: "string",
    value: { color: "red" },
    flag: "false",
    bindFor: ["comp"],
  },
  {
    name: "addonAfter",
    // nickName: "addonAfter",
    type: "string",
    value: "中国大陆",
    flag: "false",
    bindFor: ["comp"],
  },
  {
    name: "addonAfterStyle",
    // nickName: "addonAfterStyle",
    type: "string",
    value: { color: "red" },
    flag: "false",
    bindFor: ["comp"],
  },
  {
    name: "lovCode",
    // nickName: "lovCode",
    type: "string",
    value: "LOV_CODE",
    flag: "false",
    bindFor: ["field"],
  },
  {
    name: "lovDefineUrl",
    // nickName: "lovDefineUrl",
    type: "string",
    value: "/sys/lov/lov_define",
    flag: "false",
    bindFor: ["field"],
  },
  {
    name: "lovQueryUrl",
    // nickName: "lovQueryUrl",
    type: "string",
    value: "/dataset/common/lov/dataset/LOV_CODE",
    flag: "false",
    bindFor: ["field"],
  },
  {
    name: "viewMode",
    // nickName: "showValidation",
    type: "string",
    value: "popup",
    flag: "false",
    bindFor: ["comp", "field"],
  },
  {
    name: "step",
    // nickName: "step",
    type: "string",
    value: "10",
    flag: "false",
    bindFor: ["field", "comp"],
  },
  {
    name: "maxLength",
    // nickName: "maxLength",
    type: "string",
    value: "10",
    flag: "false",
    bindFor: ["field", "comp"],
  },
  {
    name: "highlightRenderer",
    // nickName: "highlightRenderer",
    type: "callback",
    value: ({ name }, element) => {
      return (
        <span style={{ color: "red" }}>
          highlightRenderer效果{element}
          {name}
        </span>
      );
    },
    flag: "false",
    bindFor: ["comp"],
  },
  {
    name: "footer",
    // nickName: "footer",
    type: "callback",
    value: () => "Footer内容",
    flag: "false",
    bindFor: ["comp"],
  },
  {
    name: "showHelp",
    // nickName: "showHelp",
    type: "enumerate",
    value: "label",
    flag: "false",
    bindFor: ["comp"],
    options: createOptions([
      { value: "newLine", meaning: "newLine" },
      { value: "tooltip", meaning: "tootip" },
      { value: "label", meaning: "label" },
      { value: "none", meaning: "none" },
    ]),
  },
  {
    name: "popupPlacement",
    // nickName: "popupPlacement",
    type: "enumerate",
    value: "bottomLeft",
    flag: "false",
    bindFor: ["comp"],
    options: createOptions([
      { value: "bottomLeft", meaning: "bottomLeft" },
      { value: "bottomRight", meaning: "bottomRight" },
      { value: "topLeft", meaning: "topLeft" },
      { value: "topRight", meaning: "topRight" },
    ]),
  },
  {
    name: "menuMode",
    // nickName: "popupPlacement",
    type: "enumerate",
    value: "single",
    flag: "false",
    bindFor: ["comp"],
    options: createOptions([
      { value: "multiple", meaning: "multiple" },
      { value: "single", meaning: "single" },
    ]),
  },
  {
    name: "mode",
    // nickName: "DatapickerMode",
    type: "enumerate",
    value: "dateTime",
    flag: "false",
    bindFor: ["comp"],
    options: createOptions([
      { value: "date", meaning: "date" },
      { value: "dateTime", meaning: "dateTime" },
      { value: "time", meaning: "time" },
      { value: "year", meaning: "year" },
      { value: "month", meaning: "month" },
      { value: "week", meaning: "week" },
    ]),
  },
  {
    name: "currency",
    // nickName: "currency",
    type: "enumerate",
    value: "CNY",
    flag: "false",
    bindFor: ["comp", "field"],
    options: createOptions([
      { value: "CNY", meaning: "CNY" },
      { value: "EUR", meaning: "EUR" },
      { value: "USD", meaning: "USD" },
    ]),
  },
  {
    name: "format",
    // nickName: "format",
    type: "enumerate",
    value: "YYYY-MM-DD",
    flag: "false",
    bindFor: ["field"],
    options: createOptions([
      { value: "HH:mm", meaning: "HH:mm" },
      { value: "HH:mm:ss A", meaning: "HH:mm:ss A" },
      { value: "YYYY-MM-DD", meaning: "YYYY-MM-DD" },
    ]),
  },
  {
    name: "timeZone",
    // nickName: "timeZone",
    type: "enumerate",
    value: "ZZ",
    flag: "false",
    bindFor: ["comp"],
    options: createOptions([{ value: "ZZ", meaning: "ZZ" }]),
  },
  {
    name: "selection",
    // nickName: "selection",
    type: "enumerate",
    value: "multiple",
    flag: "false",
    bindFor: ["ds"],
    options: createOptions([
      { value: "multiple", meaning: "multiple" },
      { value: "single", meaning: "single" },
      { value: "false", meaning: "false" },
    ]),
  },
  {
    name: "type",
    // nickName: "selection",
    type: "enumerate",
    value: "singleLine",
    flag: "false",
    bindFor: ["comp"],
    options: createOptions([
      { value: "singleLine", meaning: "singleLine" },
      { value: "multipleLine", meaning: "multipleLine" },
    ]),
  },
  {
    name: "resize",
    // nickName: "selection",
    type: "enumerate",
    value: "both",
    flag: "false",
    bindFor: ["comp"],
    options: createOptions([
      { value: "none ", meaning: "none" },
      { value: "both ", meaning: "both" },
      { value: "vertical  ", meaning: "vertical" },
      { value: "horizontal ", meaning: "horizontal" },
    ]),
  },
  {
    name: "onResize",
    // nickName: "selection",
    type: "callback",
    value: (width, height) =>
      console.log(`onResize  width: ${width}, height: ${height}`),
    flag: "false",
    bindFor: ["comp"],
  },
  {
    name: "cols",
    // nickName: "selection",
    type: "string",
    value: "6",
    flag: "false",
    bindFor: ["comp"],
  },
  {
    name: "rows",
    // nickName: "selection",
    type: "string",
    value: "6",
    flag: "false",
    bindFor: ["comp"],
  },
  {
    name: "autoSize",
    // nickName: "selection",
    type: "object",
    value: { minRows: 2, maxRows: 6 },
    flag: "false",
    bindFor: ["comp"],
  },
  {
    name: "sortable",
    // nickName: "selection",
    type: "boolean",
    value: "",
    flag: "false",
    bindFor: ["comp"],
  },
  {
    name: "titles",
    // nickName: "selection",
    type: "string",
    value: ["Source", "Target"],
    flag: "false",
    bindFor: ["comp"],
  },
];

// 属性集合 ds
export const textFieldAttrsDs = {
  selection: false,
  paging: false,
  fields: [
    { name: "name", type: FieldType.string, label: "属性" },
    // { name: "nickName", type: FieldType.string, label: "别名" },
    {
      name: "type",
      type: FieldType.string,
      label: "类型",
      options: createOptions([
        { value: "boolean", meaning: "布尔类型" },
        { value: "string", meaning: "字符串类型" },
        { value: "callBack", meaning: "回调函数" },
        { value: "ReactNode", meaning: "节点" },
      ]),
    },
    { name: "value", type: FieldType.string, label: "值", required: true },
    {
      name: "flag",
      type: FieldType.string,
      label: "阀门",
      options: createOptions([
        { value: "true", meaning: "开启" },
        { value: "false", meaning: "关闭" },
        { value: "default", meaning: "默认值" },
      ]),
      required: true,
    },
    { name: "bindFor", type: FieldType.string, label: "绑定", multiple: true },
  ],
  data: textFieldAttrsList,
};
